import java.sql.*;

public class EmployeeRegister extends Register{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Name employeeName;
	private Birthday birthday;
	/*
	 * different format: country = brazil;
	 */
	private SocialSecurity socialSecurityNumber;
	/*
	 * This object may be replaced by Salary,
	 * so Salary is wage * hours ... 
	 * and the employee may be paid also by month, instead by hours
	 */
	private Salary salary;
	private Date startingDate;
	private Boolean previousEmployed;

	private int employeeId;
	
	private Connection conn;
	
	private Telephone telephone;
	
	/*
	 * sets the employee Address
	 */
	private Address address;
	
	public EmployeeRegister() throws SQLException{
		super();
		this.birthday = new Birthday();
		this.employeeName = new Name();
		this.socialSecurityNumber = new SocialSecurity();
		this.salary = new Salary();
		this.startingDate = new Date();
		this.previousEmployed = false;
		this.employeeId = 0;
		this.address = new Address();
		this.conn = this.getConnection();
		this.telephone = new Telephone();
	}
	
	public EmployeeRegister(Birthday birthday, Name name, SocialSecurity number, Salary salary, Telephone telephone) throws SQLException{
		this.setEmployeeBirthday(birthday);
		this.setEmployeeName(name);
		this.setEmployeeSocialSecurityNumber(number);
		this.setEmployeeSalary(salary);
		this.setEmployeeTelephone(telephone);
	}
	
	public void setEmployeeTelephone(Telephone telephone){
		this.telephone = telephone;
	}
	
	public void setStartingDate(Date start){
		this.startingDate = start;
	}
	public void setPreviousEmployed(boolean answer){
		this.previousEmployed = answer;
	}
	public void setEmployeeSalary(Salary salary) {
		// TODO Auto-generated method stub
		this.salary = salary;
	}
	
	public Date getStartingDate(){
		return this.startingDate;
	}
	
	public boolean getPreviousEmployed(){
		return this.previousEmployed;
	}

	private void setEmployeeSocialSecurityNumber(SocialSecurity number) {
		// TODO Auto-generated method stub
		this.socialSecurityNumber = number;
		
	}
	
	public int getEmployeeId(){
		return this.employeeId;
	}
	
	public void setEmployeeId(int id){
		this.employeeId = id;
	}
	
	/*
	 * Sets the Seller Name
	 * using the Name object
	 */
	private void setEmployeeName(Name name) {
		// TODO Auto-generated method stub
		this.employeeName = name;
	}

	/*
	 * Sets the Seller's Birthday 
	 */
	public void setEmployeeBirthday(Birthday birthday){
		this.birthday = birthday;
	}
	
	/*
	 * returns the Seller's Birthday
	 */
	public Birthday getEmployeeBirthday(){
		return this.birthday;
	}
	
	public Name getEmployeeName(){
		return this.employeeName;
	}
	
	public Telephone getEmployeeTelephone(){
		return this.telephone;
	}
	public Salary getEmployeeSalary(){
		return this.salary;
	}
	
	public SocialSecurity getEmployeeSocialSecurityNumber(){
		return this.socialSecurityNumber;
	}
	
	public Address getEmployeeAddress(){
		return this.address;
	}
	
	/*
	 * creates the Employee Table, if it has not been created
	 * otherwise just skipps it
	 */
	public void createTableEmployee() throws SQLException{
		
		String query =  "CREATE TABLE IF NOT EXISTS Employees(id INT NOT NULL AUTO_INCREMENT, " +
						"PRIMARY KEY(id)," +
						"name VARCHAR(100) NOT NULL," +
						"previousEmployed BOOL NOT NULL," +
						"birthday DATE NOT NULL," +
						"socialSecurity VARCHAR(30)," +
						"salary FLOAT NOT NULL," +
						"startingDate DATE NOT NULL," +
						"telephone VARCHAR(20) NOT NULL" + 
						"region VARCHAR(50) NOT NULL," +
						"city VARCHAR(50) NOT NULL," +
						"state VARCHAR(50) NOT NULL," +
						"country VARCHAR(50) NOT NULL,	" +
						"address VARCHAR(100) NOT NULL)ENGINE=INNODB";
			
		try{
			
			try{
					Statement st = this.conn.createStatement();
					st.execute(query);
					System.out.println("Table Employee created with success!");
				}
			catch (SQLException e) {
					// TODO Auto-generated catch block
					System.out.println("Table already exists");
				}
			this.conn.close();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
	}
	/*
	 * MySQL query to add a new employee into the database
	 */
	public int insertNewEmployee(){
		String count = "SELECT COUNT(*) from Employees";
		
		try{
			Statement st = this.conn.createStatement();
			ResultSet resultSet = st.executeQuery(count);

			// Get the number of rows from the result set
			resultSet.next();
			// this is the employee's id
			Integer rowcount = resultSet.getInt(1);
			Locality loc = this.address.getAddressLocality();
			
			String query =  "INSERT INTO Employees VALUES("+
							rowcount.toString() + ", " + 
							this.getEmployeeName().formatToString() + ", " +
							this.previousEmployed.toString() + ", " +
							this.birthday.formatToString() + ", " + 
							this.socialSecurityNumber + ", " + 
							this.salary.formatToString() + ", " + 
							this.startingDate.formatToString() + ", " + 
							this.telephone.getTelephone() + ", " +
							loc.getRegion() + ", " + 
							loc.getCity() + ", " +
							loc.getState() + ", " +
							loc.getCountry() + ")";
			
			st.execute(query);
			
			return 0;
							
		}
		catch(SQLException e){
			System.out.println("Failed to add a new employee");
			return -1;
			
		}

	}
	
	public int updateEmployeeInformation(){
		
		try{
			Statement st = this.conn.createStatement();
			String query = "UPDATE my_table SET col_string='a new string' WHERE col_string = 'a string'";
		    int updateCount = st.executeUpdate(query);
		}
		catch(SQLException e){
			
		}
	}
	
	public int deleteEmployee(Integer employeeId){
		
		try{
			Statement st = this.conn.createStatement();
			String query = "DELETE * FROM Employees WHERE employeeId=" + employeeId.toString();
			st.execute(query);
			return 0;
		}
		catch(SQLException e){
			System.out.println("Failed to add a new employee");
			return -1;
		}
		
	}
}
